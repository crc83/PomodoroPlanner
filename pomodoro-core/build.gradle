apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

//sourceSets {
//    main.java.srcDirs += 'src/main/kotlin'
//    test.java.srcDirs += 'src/test/kotlin'
//}
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

junitPlatform {
    platformVersion "${junitPlatform}"
    logManager 'org.apache.logging.log4j.jul.LogManager'
	filters {
		engines {
			include 'junit-jupiter', 'junit-vintage'
			// exclude 'custom-engine'
		}
		tags {
			include 'api'
			// exclude 'slow'
		}
		includeClassNamePattern '.*Speck'
	}
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin"
    compile 'com.google.code.gson:gson:2.8.2'
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin"
    compile "org.jetbrains.anko:anko-sqlite:$anko"
    
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin"
    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:$junitJupiter")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitJupiter")
    testRuntime("org.junit.vintage:junit-vintage-engine:$junitVintage")

    // To avoid compiler warnings about @API annotations in JUnit code
    testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')

    // To use Log4J's LogManager
    testRuntime("org.apache.logging.log4j:log4j-core:$log4j")
    testRuntime("org.apache.logging.log4j:log4j-jul:$log4j")

    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntime("org.junit.platform:junit-platform-launcher:$junitPlatform")
}

test {
    testLogging.showStandardStreams = true
}

